{"version":3,"sources":["Controls.js","Main/index.js","App.js","reportWebVitals.js","index.js"],"names":["Controls","props","useThree","camera","domElement","gl","controls","useRef","useFrame","current","update","ref","args","extend","OrbitControls","AnimationBox","d","t","children","springXZ","useSpring","from","to","loop","reverse","config","duration","springY","position","z","Math","cos","get","x","sin","y","group","Scene","useState","count","setCount","useSkybox","intensity","Effects","fallback","Array","map","LanternOfGLTF","floor","random","url","MainLentern","Main","style","width","height","zIndex","translate","onCreated","state","setClearColor","colorManagement","shadowMap","fov","setIntensity","onClick","prev","console","log","distance","useMemo","scene","useGLTF","copiedScene","clone","scale","object","imagePaths","img","useEffect","mat","THREE","load","background","environment","blurPass","undefined","Resizer","AUTO_SIZE","kernelSize","KernelSize","LARGE","luminanceThreshold","luminanceSmoothing","opacity","eskil","offset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7e51a4a.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { extend,  useThree, useFrame } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nextend({ OrbitControls });\n\nexport default function Controls(props){\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n  const controls = useRef({});\n\n  useFrame(() => controls.current.update());\n  return (\n    <orbitControls {...props} ref={controls} args={[camera, domElement]} />\n  );\n};\n","import React, { Suspense, useRef, useState, useMemo } from 'react';\n// import * as THREE from 'three';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\n// import { Stars } from '@react-three/drei';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\n\nimport Controls from '../Controls';\n\nimport { useSpring, a } from \"@react-spring/three\";\n\nimport { LanternOfGLTF, Effects, useSkybox } from '../App'\n\nexport const Background = () => {\n  const texture = useLoader(TextureLoader, './background.jpg');\n  \n  return (\n    <mesh>\n      <planeGeometry attach=\"geometry\" args={[1440 / 10, 718 / 10]} />\n      {texture && <meshBasicMaterial attach=\"material\" map={texture} />}\n    </mesh>\n  );\n};\n\n// function FloatingBox() {\n//     const ref = useRef()\n//     // const props = useSpring({\n//     //     position: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n//     // });\n//     const props = useSpring({\n//         loop: { reverse: true },\n//         from: -1,\n//         to: 1,\n//         config: { duration: 2500 }\n//       });\n//     useFrame(() => {\n//         ref.current.position.y = Math.sin(props)\n//     })\n//     return  <a.mesh\n//         ref={ref}\n//     >\n//         <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n//         <a.meshStandardMaterial roughness={0.5} attach=\"material\" />\n//     </a.mesh>\n//     // return <group ref={ref}>{children}</group>\n// }\n\n\n\n\nfunction AnimationBox({ d, t, children }) {\n    const ref = useRef();\n    // create a common spring that will be used later to interpolate other values\n    const { springXZ } = useSpring({\n      from: { springXZ: -1 },\n      to: { springXZ: 1 },\n      loop: { reverse: true },\n      config: {\n        duration: t / 3 * 2,\n        \n        // friction: 10,\n        // tension: 6,\n        // frequency: 4,\n        // mass: 0\n      }\n    });\n    const { springY } = useSpring({\n        from: { springY: -1 },\n        to: { springY: 1 },\n        loop: { reverse: true },\n        config: {\n          duration: t,\n          \n          // friction: 10,\n          // tension: 6,\n          // frequency: 4,\n          // mass: 0\n        }\n    });\n    // interpolate values from commong spring\n    // const positionXZ = spring.to([0, 1], [-0.1, 0.1]);\n    \n    useFrame(() => {\n      ref.current.position.z = Math.cos(springXZ.get()) * d / 2;\n      ref.current.position.x = Math.sin(springXZ.get()) * d / 2;\n      ref.current.position.y = Math.sin(springY.get()) * d;\n    });\n\n    return (\n      // using a from react-spring will animate our component\n      <a.group ref={ref}>\n        {children}\n      </a.group>\n    );\n  }\n\n// function MainBox(){\n//     const mesh = useRef();\n//     // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n//     const [expand, setExpand] = useState(false);\n    \n\n//     return (\n//         <a.go  />\n//     );\n// }\n\n\nfunction Scene() {\n  const [count, setCount] = useState(3);\n  \n  useSkybox();\n  \n  return (\n    <>\n      <pointLight position={[0, -10, 0]} intensity={1.5} />\n      <Effects />\n      <Suspense fallback={<></>}>\n\n        {/* <Bloom f={3}> */}\n          <AnimationBox  t={3000} d={0.1}>\n            {\n              // x = -50 ~ 50, y = -30 ~ 30, z = 5 ~ 1\n              Array.from(new Array(count)).map(() => {\n                return <LanternOfGLTF x={Math.floor(Math.random() * 100 - 50)} y={Math.floor(Math.random() * 30)} z={Math.floor(Math.random() * 10 + 1)} url=\"./lantern.glb\"/>\n              })\n            }\n          </AnimationBox>\n          <pointLight position={[0, -4, 10]} intensity={1.5} />\n          <MainLentern setCount={setCount} x={0} y={-1.5} z={52} />\n            \n        {/* </Bloom> */}\n      </Suspense>\n    </>\n  )\n}\n\n\nexport default function Main (){\n  return(\n    <div style={{position:'absolute', width: \"100%\", height: \"100%\", zIndex: 100}}>\n      <Canvas\n        translate={true}\n        onCreated={state => state.gl.setClearColor( 0xffffff, 0)}\n        colorManagement\n        shadowMap\n        camera={{ position: [0, 0, 60], fov: 60 }}\n      >\n        <Scene />\n        <Controls />\n        <gridHelper />\n      </Canvas>\n    </div>\n  );    \n};\n\nfunction MainLentern ({ setCount, x, y, z }) {\n  const [intensity, setIntensity] = useState(0);\n  \n  return (\n    <mesh onClick={() => {\n      setIntensity(intensity + 0.1);\n      setCount(prev => prev + 1);\n      console.log(\"click\");\n    }}>\n      {/* <pointLight distance={10} position={[ x, y - 2.5, z + 1]} intensity={intensity} /> */}\n      <pointLight distance={10} position={[ x, y + 5, z + 9]} intensity={intensity} />\n      <pointLight position={[ x, y - 2.5, z + 3]} intensity={0.6} />\n      {useMemo(() => <LanternOfGLTF x={0} y={-1.5} z={52} url=\"./lantern.glb\"/>, [])}\n    </mesh>\n  )\n}","import React, { useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport { Html, useProgress, useGLTF } from '@react-three/drei';\n\n// import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js'\n// import { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader'\n// import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\n// import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\n// import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\n\nimport { EffectComposer, Bloom, /*DepthOfField,*/Noise, Vignette, SelectiveBloom } from '@react-three/postprocessing'\nimport { /*BlurPass, */Resizer, KernelSize } from 'postprocessing'\n\nimport Controls from './Controls';\n\n\nimport Model from './Main'\n\nexport function LanternOfGLTF ({x, y, z, url}) {\n  const {scene} = useGLTF(url);\n  const copiedScene = useMemo(() => scene.clone(), [scene])\n  console.log(copiedScene)\n\n  return copiedScene ? <group position={[x,y,z]} scale={0.005}>\n    <primitive object={copiedScene}/>\n  </group> : null\n}\n\nexport function Loader() {\n  const { progress } = useProgress()\n  return <Html center>{progress} % loaded</Html>\n}\n\nconst path = './Skybox/nightsky_';\nconst images = ['lf', 'rt', 'up', 'dn', 'ft', 'bk'];\nconst ext = '.png';\nconst imagePaths = images.map(img => path + img + ext);\n\nexport const useSkybox = () => {\n  const { scene } = useThree();\n\n  useEffect(() => {\n    const loader = new THREE.CubeTextureLoader()\n    const mat = loader.load(imagePaths)\n    scene.background = mat\n    scene.environment = mat\n  }, [scene])\n\n  return null\n}\n\nexport function SelectiveEffects({lightsRefs, meshRefs}){\n  return (\n    <SelectiveBloom\n      lights={lightsRefs} // ⚠️ REQUIRED! all relevant lights\n      selection={meshRefs} // selection of objects that will have bloom effect\n      selectionLayer={10} // selection layer\n      intensity={1.0} // The bloom intensity.\n      blurPass={undefined} // A blur pass.\n      width={Resizer.AUTO_SIZE} // render width\n      height={Resizer.AUTO_SIZE} // render height\n      kernelSize={KernelSize.LARGE} // blur kernel size\n      luminanceThreshold={0.9} // luminance threshold. Raise this value to mask out darker elements in the scene.\n      luminanceSmoothing={0.025} // smoothness of the luminance threshold. Range is [0, 1]\n    />\n  )\n}\n\n\nexport function Effects() {\n  // const AO = { samples: 3, luminanceInfluence: 0.6, radius: 2, intensity: 5 }\n  return (\n    <EffectComposer>\n      {/* <DepthOfField focusDistance={0} focalLength={0.02} bokehScale={2} height={480} /> */}\n      {/* <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} /> */}\n      <Bloom\n        intensity={1.0} // The bloom intensity.\n        blurPass={undefined} // A blur pass.\n        width={Resizer.AUTO_SIZE} // render width\n        height={Resizer.AUTO_SIZE} // render height\n        kernelSize={KernelSize.LARGE} // blur kernel size\n        luminanceThreshold={0} // luminance threshold. Raise this value to mask out darker elements in the scene.\n        luminanceSmoothing={0.025} // smoothness of the luminance threshold. Range is [0, 1]\n      />\n      <Noise opacity={0.02} />\n      <Vignette eskil={false} offset={0.1} />\n  </EffectComposer>\n  )\n}\n\nfunction Scene() {\n  useSkybox();\n  return null;\n}\n\nexport default function App (){\n  \n\n  return(\n    <>\n      <Model />\n      <div style={{position:'absolute', width: \"100%\", height: \"100%\"}}>\n        <Canvas\n          translate={true}\n          colorManagement\n          shadowMap\n          camera={{ position: [-5, 3, 6], fov: 60 }}\n        >\n          <Scene />\n          <Controls />\n          <gridHelper />\n        </Canvas>\n      </div>\n    </>\n  );    \n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  // <Main />,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}