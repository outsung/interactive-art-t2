{"version":3,"sources":["Controls.js","App.js","Main/index.js","reportWebVitals.js","index.js"],"names":["Controls","props","useThree","camera","domElement","gl","controls","useRef","useFrame","current","update","ref","args","LanternOfGLTF","x","y","z","url","func","scene","useGLTF","copiedScene","useMemo","clone","console","log","onClick","position","scale","object","Bloom","children","f","size","useState","setScene","composer","useEffect","render","attachArray","intensity","undefined","Main","autoClear","clearDepth","extend","OrbitControls","EffectComposer","RenderPass","UnrealBloomPass","AnimationBox","d","t","springXZ","useSpring","from","to","loop","reverse","config","duration","springY","Math","cos","get","sin","group","style","width","height","colorManagement","shadowMap","fov","fallback","Array","map","floor","random","Stars","radius","depth","count","factor","saturation","fade","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.81135719.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport { extend,  useThree, useFrame } from '@react-three/fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nextend({ OrbitControls });\r\n\r\nexport default function Controls(props){\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n  const controls = useRef({});\r\n\r\n  useFrame(() => controls.current.update());\r\n  return (\r\n    <orbitControls {...props} ref={controls} args={[camera, domElement]} />\r\n  );\r\n};\r\n","import React, { Suspense, useState, useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { Canvas, useThree, useFrame, extend, useLoader } from '@react-three/fiber';\nimport { Html, useProgress, useGLTF, useFBX } from '@react-three/drei';\n\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js'\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\n\nimport Controls from './Controls';\n\nextend({ EffectComposer, RenderPass, UnrealBloomPass })\n\n\nfunction LanternOfDae ({x, y, z, url}) {\n  const {scene} = new ColladaLoader(url);\n  // ColladaExporter\n  return scene ? <group position={[x,y,z]} scale={0.005}>\n    <primitive object={scene}/>\n  </group> : null\n}\n\nfunction LanternOfObj ({x, y, z, url}) {\n  // const materials = useLoader(MTLLoader, mtlUrl)\n  const object = useLoader(OBJLoader, url, loader => {\n    // materials.preload()\n    // loader.setMaterials(materials)\n  })\n  return <primitive position={[x,y,z]} scale={0.005} object={object} />\n}\n\n\n\nexport function LanternOfGLTF ({x, y, z, url, func = () => {return;}}) {\n  const {scene} = useGLTF(url);\n  const copiedScene = useMemo(() => scene.clone(), [scene])\n\n  console.log(copiedScene)\n\n  return copiedScene ? <group onClick={() => {\n    func();\n    console.log(\"GLTF click\")\n  }} position={[x,y,z]} scale={0.005}>\n    <primitive object={copiedScene}/>\n  </group> : null\n}\n\nfunction LanternOfFBX ({x, y, z, url}) {\n  const {scene} = useFBX(url);\n  \n  return scene ? <group position={[x,y,z]} scale={0.005}>\n    <primitive object={scene}/>\n  </group> : null\n}\n\n\nfunction Loader() {\n  const { progress } = useProgress()\n  return <Html center>{progress} % loaded</Html>\n}\n\n\n\nfunction Sphere({ geometry, x, y, z, s }) {\n  const ref = useRef()\n  useFrame((state) => {\n    ref.current.position.x = x + Math.sin((state.clock.getElapsedTime() * s) / 2)\n    ref.current.position.y = y + Math.sin((state.clock.getElapsedTime() * s) / 2)\n    ref.current.position.z = z + Math.sin((state.clock.getElapsedTime() * s) / 2)\n  })\n  return (\n    <mesh ref={ref} position={[x, y, z]} scale={[s, s, s]} geometry={geometry}>\n      <meshStandardMaterial color=\"hotpink\" roughness={1} />\n    </mesh>\n  )\n}\n\nfunction RandomSpheres() {\n  const [geometry] = useState(() => new THREE.SphereGeometry(1, 32, 32), [])\n  const data = useMemo(() => {\n    return new Array(15).fill().map((_, i) => ({\n      x: Math.random() * 100 - 50,\n      y: Math.random() * 100 - 50,\n      z: Math.random() * 100 - 50,\n      s: Math.random() + 10,\n    }))\n  }, [])\n  return data.map((props, i) => <Sphere key={i} {...props} geometry={geometry} />)\n}\n\nexport function Bloom({ children, f }) {\n  const { gl, camera, size } = useThree()\n  const [scene, setScene] = useState()\n  const composer = useRef()\n  useEffect(() => void scene && composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => scene && composer.current.render(), 1)\n  return (\n    <>\n      <scene ref={setScene}>{children}</scene>\n      <effectComposer ref={composer} args={[gl]}>\n        <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n        <unrealBloomPass intensity={5} attachArray=\"passes\" args={[undefined, f, 1, 0]} />\n        {/*\n          constructor(resolution: Vector2, strength: number, radius: number, threshold: number);\n          resolution: Vector2;\n          strength: number;\n          radius: number;\n          threshold: number;\n          clearColor: Color;\n          renderTargetsHorizontal: WebGLRenderTarget[];\n          renderTargetsVertical: WebGLRenderTarget[];\n          nMips: number;\n          renderTargetBright: WebGLRenderTarget;\n          highPassUniforms: object;\n          materialHighPassFilter: ShaderMaterial;\n          separableBlurMaterials: ShaderMaterial[];\n          compositeMaterial: ShaderMaterial;\n          bloomTintColors: Vector3[];\n          copyUniforms: object;\n          materialCopy: ShaderMaterial;\n          oldClearColor: Color;\n          oldClearAlpha: number;\n          basic: MeshBasicMaterial;\n          fsQuad: object;\n\n          dispose(): void;\n          getSeperableBlurMaterial(): ShaderMaterial;\n          getCompositeMaterial(): ShaderMaterial;\n        */}\n      </effectComposer>\n    </>\n  )\n}\n\n\nexport function Main({ children }) {\n  const scene = useRef()\n  const { gl, camera } = useThree()\n  useFrame(() => {\n    gl.autoClear = false\n    gl.clearDepth()\n    gl.render(scene.current, camera)\n  }, 2)\n  return <scene ref={scene}>{children}</scene>\n}\n\n\nexport default function App (){\n  // const [clicked, setClicked] = useState(false);\n  // clicked;\n  const ref = useRef(null);\n  const [file, setFile] = useState(null);\n\n  return(\n    <div style={{width: \"100%\", height: \"100%\"}}>\n      <input ref={ref} type=\"file\" style={{display:\"none\"}} />\n      <Canvas\n        colorManagement\n        shadowMap\n        camera={{ position: [-5, 3, 6], fov: 60 }}\n      >\n        {/* <ambientLight intensity={0.4} /> */}\n        {/* <directionalLight\n          castShadow\n          position={[2.5, 8, 5]}\n          intensity={1}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        /> */}\n        {/* <pointLight position={[-10, 0, -20]} color=\"#A6586D\" intensity={2.5} /> */}\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n        <Bloom>\n          <ambientLight intensity={0.4} />\n          <Suspense fallback={<Loader />}>\n            {/* <Lantern x={0} y={0} z={0} url=\"./Lantern.glb\"/> */}\n            <LanternOfGLTF x={0} y={0} z={0} url=\"./Lantern (1).glb\"/>\n            {/* <LanternOfGLTF x={0} y={0} z={0} url=\"./Lantern (3).gltf\"/> */}\n            {/* <Lantern x={-5} y={0} z={0} url=\"./Lantern (1).glb\"/> */}\n            {/* <Lantern x={5} y={0} z={0} url=\"./Lantern (2).gltf\"/> */}\n            {/* <Lantern x={0} y={5} z={0} url=\"./Lantern (2).gltf\"/> */}\n          </Suspense>\n          {/* <pointLight color=\"#F7DE4F\" position={[0,2,0]} distance={1.5} intensity={5}/> */}\n          {/* <pointLight color=\"#ED7B4C\" position={[0,2,0]} distance={4} intensity={5}/> */}\n          {/* <RandomSpheres/> */}\n        </Bloom>\n        <Controls />\n        <gridHelper />\n      </Canvas>\n    </div>\n  );    \n};\n","import React, { Suspense, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\r\nimport { Stars } from '@react-three/drei';\r\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\r\n\r\nimport Controls from '../Controls';\r\n\r\nimport { useSpring, a } from \"@react-spring/three\";\r\n\r\n\r\nimport { LanternOfGLTF, Bloom, Main as M } from '../App'\r\n\r\nconst Background = () => {\r\n  const texture = useLoader(TextureLoader, './background.jpg');\r\n  \r\n  return (\r\n    <mesh>\r\n      <planeGeometry attach=\"geometry\" args={[1440 / 10, 718 / 10]} />\r\n      {texture && <meshBasicMaterial attach=\"material\" map={texture} />}\r\n    </mesh>\r\n  );\r\n};\r\n\r\n// function FloatingBox() {\r\n//     const ref = useRef()\r\n//     // const props = useSpring({\r\n//     //     position: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\r\n//     // });\r\n//     const props = useSpring({\r\n//         loop: { reverse: true },\r\n//         from: -1,\r\n//         to: 1,\r\n//         config: { duration: 2500 }\r\n//       });\r\n//     useFrame(() => {\r\n//         ref.current.position.y = Math.sin(props)\r\n//     })\r\n//     return  <a.mesh\r\n//         ref={ref}\r\n//     >\r\n//         <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\r\n//         <a.meshStandardMaterial roughness={0.5} attach=\"material\" />\r\n//     </a.mesh>\r\n//     // return <group ref={ref}>{children}</group>\r\n// }\r\n\r\n\r\n\r\n\r\nfunction AnimationBox({ d, t, children }) {\r\n    const ref = useRef();\r\n    // create a common spring that will be used later to interpolate other values\r\n    const { springXZ } = useSpring({\r\n      from: { springXZ: -1 },\r\n      to: { springXZ: 1 },\r\n      loop: { reverse: true },\r\n      config: {\r\n        duration: t / 3 * 2,\r\n        \r\n        // friction: 10,\r\n        // tension: 6,\r\n        // frequency: 4,\r\n        // mass: 0\r\n      }\r\n    });\r\n    const { springY } = useSpring({\r\n        from: { springY: -1 },\r\n        to: { springY: 1 },\r\n        loop: { reverse: true },\r\n        config: {\r\n          duration: t,\r\n          \r\n          // friction: 10,\r\n          // tension: 6,\r\n          // frequency: 4,\r\n          // mass: 0\r\n        }\r\n    });\r\n    // interpolate values from commong spring\r\n    // const positionXZ = spring.to([0, 1], [-0.1, 0.1]);\r\n    \r\n    useFrame(() => {\r\n      ref.current.position.z = Math.cos(springXZ.get()) * d / 2;\r\n      ref.current.position.x = Math.sin(springXZ.get()) * d / 2;\r\n      ref.current.position.y = Math.sin(springY.get()) * d;\r\n    });\r\n\r\n    return (\r\n      // using a from react-spring will animate our component\r\n      <a.group ref={ref}>\r\n        {children}\r\n      </a.group>\r\n    );\r\n  }\r\n\r\n// function MainBox(){\r\n//     const mesh = useRef();\r\n//     // useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\r\n//     const [expand, setExpand] = useState(false);\r\n    \r\n\r\n//     return (\r\n//         <a.go  />\r\n//     );\r\n// }\r\n\r\nexport default function Main (){\r\n  return(\r\n    <div style={{width: \"100%\", height: \"100%\"}}>\r\n      <Canvas\r\n        colorManagement\r\n        shadowMap\r\n        camera={{ position: [0, 0, 60], fov: 60 }}\r\n      >\r\n        {/* <ambientLight intensity={0.4} />\r\n        <directionalLight\r\n          castShadow\r\n          position={[2.5, 8, 5]}\r\n          intensity={1}\r\n          shadow-mapSize-width={1024}\r\n          shadow-mapSize-height={1024}\r\n          shadow-camera-far={50}\r\n          shadow-camera-left={-10}\r\n          shadow-camera-right={10}\r\n          shadow-camera-top={10}\r\n          shadow-camera-bottom={-10}\r\n        /> */}\r\n        {/* <pointLight position={[-10, 0, -20]} color=\"#A6586D\" intensity={2.5} /> */}\r\n        {/* <pointLight position={[0, -10, 0]} intensity={1.5} /> */}\r\n        {/* <ambientLight intensity={0.4} /> */}\r\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\r\n        <Suspense fallback={<></>}>\r\n            <Bloom f={7}>\r\n              <ambientLight intensity={0.4} />\r\n              <AnimationBox  t={3000} d={0.1}>\r\n                {\r\n                  // x = -50 ~ 50, y = -30 ~ 30, z = 5 ~ 1\r\n                  Array.from(new Array(10)).map(() => {\r\n                    return <LanternOfGLTF x={Math.floor(Math.random() * 100 - 50)} y={Math.floor(Math.random() * 30)} z={Math.floor(Math.random() * 10 + 1)} url=\"./test.glb\"/>\r\n                  })\r\n                }\r\n              </AnimationBox>\r\n              <pointLight position={[0, -4, 53]} intensity={1.5} />\r\n              {/* <pointLight position={[0, -1, 52]} intensity={1.5} /> */}\r\n              <LanternOfGLTF x={0} y={-1.5} z={52} url=\"./test.glb\"/>\r\n            </Bloom>\r\n            <M>\r\n              {/* <Background /> */}\r\n              <Stars\r\n                radius={100} // Radius of the inner sphere (default=100)\r\n                depth={50} // Depth of area where stars should fit (default=50)\r\n                count={5000} // Amount of stars (default=5000)\r\n                factor={4} // Size factor (default=4)\r\n                saturation={0} // Saturation 0-1 (default=0)\r\n                fade // Faded dots (default=false)\r\n              />\r\n            </M>\r\n        </Suspense>\r\n        \r\n        <Controls />\r\n        <gridHelper />\r\n      </Canvas>\r\n    </div>\r\n  );    \r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <App />,\n  <Main />,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}